<HTML><HEAD><TITLE>网络7层管理和过滤的领导者</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type>
<LINK rel=stylesheet type=text/css href="/ext/resources/css/ext-all.css">
<LINK rel=stylesheet type=text/css href="/ext/resources/css/xtheme-default.css">
<SCRIPT type=text/javascript src="/ext/adapter/ext/ext-base.js"></SCRIPT>
<SCRIPT type=text/javascript  src="/ext/ext-all.js"></SCRIPT>
<SCRIPT type=text/javascript  src="/msa/publicjs/pubstyle.js"></SCRIPT>
<link rel="stylesheet" type="text/css" href="/msa/publiccss/pubcss.css">
<link rel="stylesheet" href="/msa/publiccss/css.css" type="text/css">
<script type=text/javascript  src="/msa/publicjs/select_time_st.js"></script>
<script type=text/javascript  src="/msa/publicjs/exportexcel.js"></script>
<SCRIPT type=text/javascript>
Ext.BLANK_IMAGE_URL = '/msa/extjs/resources/images/default/s.gif'; 
Ext.onReady(function(){ 
	var policywin;
	var groupwin;
	var seled;
	var btn_Service = Ext.get('Service');
	var btn_Manager = Ext.get('Manager');
	
		//策略树
	var policytree=new Ext.tree.TreePanel({
		//renderTo:Ext.getBody(),
		height:300,
		split: true,
		useArrows:true,
		autoScroll: true,
		rootVisible: false,
		lines: false,
		useArrows: true,
		root: new Ext.tree.AsyncTreeNode() ,
		loader: new Ext.tree.TreeLoader({
			dataUrl:'/msa/main.xp?Fun=msaPolicyTree',//传参数1或2  决定是否有多选框
			baseParams:{Fun:'msaPolicyTree',type:0} 
		}),
		listeners: {
					    click: function(node, e) {
							document.getElementById('grouppolicy').value=node.id;
					    policywin.hide();
					   }
		}
	 });
	 
	//部门树
	var grouptreepan=new Ext.tree.TreePanel({
		//renderTo:Ext.getBody(),
		height:300,
		split: true,
		useArrows:true,
		autoScroll: true,
		rootVisible: false,
		lines: false,
		useArrows: true,
		root: new Ext.tree.AsyncTreeNode(),
		loader: new Ext.tree.TreeLoader({
			dataUrl:'/msa/main.xp?Fun=msaGroupTreeView',
			baseParams:{Fun:'msaGroupTreeView'} 
		}),
		listeners: {
					    click: function(node, e) {
							document.getElementById('groupmanager').value=node.id;
					    groupwin.hide();
					   }
		}		
	 });
	 
	 grouptreepan.on('load',function(node){
       grouptreepan.expandAll(); 
       var mynode=node;
       mynode.getUI().toggleCheck(true);   
   });

	
	btn_Service.on('click', function(){
		if(!policywin){
			policywin = new Ext.Window({
				title: '选择所属策略',
				closeAction: 'hide',
				width: 500,
				height:300,
				plain:true,
				items:policytree,
				bodyStyle:'padding:5px;'
			});
		}
		policywin.show();		
	});
	
	btn_Manager.on('click', function(){
		if(!groupwin){
		groupwin = new Ext.Window({
				title: '选择所属部门',
				closeAction: 'hide',
				width: 500,
				height:300,
				plain:true,
				items:grouptreepan,
				bodyStyle:'padding:5px;'
			});
		}
		groupwin.show();		
	});

	});
	
	function  applylistfun() {
		Ext.MessageBox.show({
					msg: '正在应用网络对象......',
					progressText: '正在应用网络对象....',
					width:350,
					wait:true,
					progress:true,
					waitConfig: {interval:1000},
					icon:'ext-mb-download'
		}); 
		Ext.Ajax.request({
				method : 'POST', 
		    url:'/msa/main.xp', 
		    success: function(response, options){
			  	 var retxt=response.responseText;
			  	 Ext.MessageBox.hide(); 
			  	 if(retxt.substring(0,1)=="1"){
			  	  	Ext.MessageBox.alert('提示','网络对象应用成功!');
			     }else{
			  	 	  Ext.MessageBox.alert('提示',"网络对象应用失败!"); 
			  	 }
	      },
		    failure : function(){  
		    	Ext.MessageBox.hide();  
			  	Ext.MessageBox.alert('提示',"网络对象应用失败!"); 
		    },
		    params:{Fun:'ltapplynetArea'}
		});
		//xtzystore.load();
	
	}
</script>

<script type="text/javascript">
	  var xtzystore;
		function addlistfun() {
				
			if(listform.bip.value=="" ){
				alert("起始IP不能为空!");
				listform.bip.focus();
				return;
			}
			
			if(!(listform.bip.value=="")){
				var mybip=listform.bip.value;
			  var regIP=/^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$/;
			  var IP_flag=false;
			  if(regIP.test(mybip)){
				IP_flag = true;
				}else{
				IP_flag = false;
				}
				if (!IP_flag){
				  alert("对不起，ip地址格式错误！");
					listform.bip.focus();
					listform.bip.select();
				  return false;
				}
			}
			if(listform.eip.value=="" ){
				alert("结束IP不能为空!");
				listform.eip.focus();
				return;
			}
			
			if(!(listform.eip.value=="")){
				var myeip=listform.eip.value;
			  var regIP=/^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$/;
			  var IP_flag=false;
			  if(regIP.test(myeip)){
				IP_flag = true;
				}else{
				IP_flag = false;
				}
				if (!IP_flag){
				  alert("对不起，ip地址格式错误！");
					listform.eip.focus();
					listform.eip.select();
				  return false;
				}
			}
			
			if(!(listform.homeurl.value=="")){
				var myurl=listform.homeurl.value;
			  var regURL=/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\:+!]*([^<>])*$/;
			  var URL_flag=false;
			  if(regURL.test(myurl)){
				URL_flag = true;
				}else{
				URL_flag = false;
				}
				if (!URL_flag){
				  alert("对不起，URL地址格式错误！");
					listform.homeurl.focus();
					listform.homeurl.select();
				  return false;
				}
			}
		  var grouppolicy=document.getElementById('grouppolicy').value;
			var groupmanager=document.getElementById('groupmanager').value;
			var bip=listform.bip.value;
			var eip=listform.eip.value;
			var netflag=listform.netflag.value;
			var snmpnum=listform.snmpnum.value;
			var homeurl=listform.homeurl.value;
			var ipdesp=listform.ipdesp.value;
			var aa=document.getElementById("hash").value;
			
			var myhash = document.getElementsByName("hash");
		  for(i=0;i<myhash.length;i++){
		    	if(myhash[i].checked){
		    		break;
		    	}
		  };
			var hashcheck=myhash[i].value;
		
			
			Ext.Ajax.request({
					method : 'POST', 
			    url:'/msa/main.xp', 
			    success: function(response, options){
				  	 var retxt=response.responseText;
				  	 if(retxt.substring(0,1)=="0"){
				  	  	 Ext.MessageBox.alert('提示','添加网络对象成功!');
				        xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
				  	 }else{
				  	 	   Ext.MessageBox.alert('提示',"添加网络对象失败!"); 
				  	 }
				     
				      
		      },
			    failure : function(){   
				  	 Ext.MessageBox.alert('提示',"添加网络对象失败!"); 
			    },
			    params:{Fun:'ltnetareaaction',
					   	ipstart:bip,
					   	ipend:eip,
					   	ipdesp:ipdesp,
					   	netflag:netflag,
					   	snmpnum:snmpnum,
					   	nohashcheck:hashcheck,
					   	homeurl:homeurl,
					   	groupid:groupmanager,
					   	policyid:grouppolicy
			   	}
			
			});
		}
    var northPanel;
    Ext.BLANK_IMAGE_URL = '/msa/extjs/resources/images/default/s.gif';
		var pagesize;
		var havesearch;
		pagesize=50;
		havesearch=0;
    Ext.onReady(function(){
	  		Ext.QuickTips.init();
				var detailEl;
				var myMask = new Ext.LoadMask(Ext.getBody(),{
				    msg:"Please wait..."
				});
				myMask.show();
		    xtzystore = new Ext.data.JsonStore({
		        root: 'Results',
		        totalProperty: 'totalCount',
		        url:'/msa/main.xp',
		        baseParams:{Fun:'ltnetarealist'},
		        fields: [
		           {name: 'id'},
		           {name: 'ipstart'},
		           {name: 'ipend'},
		           {name: 'netflag'},
		           {name: 'snmpnum'},
		           {name: 'nohashcheck'},
		           {name: 'homeurl'},
		           {name: 'groupid'},
		           {name: 'policyid'},
		           {name: 'groupname'},
		           {name: 'policyname'},
		           {name: 'ipdesp'}
		        ]
		    });
		    xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
		    var pagingBar = new Ext.PagingToolbar({
		        pageSize: pagesize,
		        store: xtzystore,
		        displayInfo: true,
		        displayMsg: '显示 {0} - {1} 共 {2}',
		        emptyMsg: "没有数据",
		        items:[
		            '-','每页',this.inputItem = new Ext.form.NumberField({ 
											    cls: 'x-tbar-page-number', 
											    allowDecimals: false, 
											    allowNegative: false, 
											    enableKeyEvents: true,
											    value: pagesize,
											    maxValue: 500, 
											    maxText: '每页不允许超过500条', 
											    selectOnFocus: true, 
											    submitValue: false,
											    listeners: { 
											        scope: this, 
											        keydown: function(field, e){ 
												        if(field.isValid()){ 
												            var k = e.getKey(); 
												             if (k == e.RETURN) { 
												                    e.stopEvent(); 
												                    pagesize = field.getValue();
												                    if(havesearch==1){
												                      xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
												                    }
												             } 
												        } 
											        }, 
											        blur: function(field){
												        if(field.isValid()){
												            pagesize = field.getValue();
												            if(havesearch==1){
												                      xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
												            }
												        } 
											        }
											    }}),
											    '条','-', {
											            icon: '/msa/images/grid.png',
											            enableToggle:true,
											            text: '导出本页数据到Excel',
											            cls: 'x-btn-text-icon details',
											            toggleHandler: function(btn, pressed){
											                downloadViewDataActive(xtzygrid);
											            }
											    },'-',{
												            icon: '/msa/images/warning.gif',
												            enableToggle:true,
												            text: '应用网络对象',
												            cls: 'x-btn-text-icon details',
												            toggleHandler: function(btn, pressed){
																				applylistfun();	
																		}
												      },
												  '-']
			  });
		    function conChange(val){
		        if(val == 1){
		            return '基于IP地址锁定';
		        }else if(val == 2){
		            return '基于MAC地址锁定';
		        }else if(val == 4){
		            return '基于PPPOE验证';
		        }else if(val == 21){
		            return 'AD身份验证';
		        }else if(val == 22){
		            return '心跳机制AD验证-web方式';
		        }else if(val == 23){
		            return '用户密码web验证';
		        }else if(val == 24){
		            return '心跳机制web验证';
		        }else if(val == 25){
		            return '客户端方式验证';
		        }else if(val == 26){
		            return 'LDAP身份验证-web方式';
		        }else if(val == 27){
		            return '心跳机制LDAP身份验证-web方式';
		        }else if(val == 28){
		            return '客户端LDAP身份验证';
		        }else if(val == 29){
		            return 'RADIUS身份验证-web方式';
		        }else if(val == 30){
		            return '心跳机制RADIUS身份验证-web方式';
		        }else if(val == 31){
		            return '客户端RADIUS身份验证';
		        }else if(val == 41){
		            return '免身份验证强制客户端';
		        }else if(val == 44){
		            return 'usbkey身份验证';
		        }else if(val == 90){
		            return '外部服务器';
		        }else if(val == 91){
		            return '无限制外部服务器';
		        }else if(val == 99){
		            return '免监控网段';
		        }else if(val == 100){
		            return '禁止连接网段';
		        }
		        return val;
		    }
		    function snmpChange(val)
		    {	
				    if(val == 0){
				    	  return '不通过SNMP识别MAC';
				    }
				    else
				    {
				    	return '通过SNMP'+val+'识别MAC';
				    }
		    }
		    var xtzygrid = new Ext.grid.GridPanel({
		        region:'center',
		        store: xtzystore,
		        columns: [
		            {header: "起始IP", width: 90, sortable: true, dataIndex: 'ipstart'},
		            {header: "结束IP",   width: 90, sortable: true,  dataIndex: 'ipend'},
		            {id:"ipdesp",header: "IP描述",   width: 180, sortable: true,  dataIndex: 'ipdesp'},
		            {header: "网络标识",  width: 110, sortable: true,  dataIndex: 'netflag',renderer: conChange},
		            {header: "SNMP识别",  width: 140, sortable: true,  dataIndex: 'snmpnum',renderer: snmpChange},
		            {header: "所属部门",  width: 140, sortable: true,  dataIndex: 'groupname'},
		            {header: "所属策略组",  width: 140, sortable: true,  dataIndex: 'policyname'},
		            {header: "首次访问页面",  width: 200, sortable: true,  dataIndex: 'homeurl'}
		        ],
		        tbar: pagingBar,
		        stripeRows: true,
		        //autoExpandColumn: 'ipdesp',
		        width:280,
		        height:screen.height-350,
				    collapsible:false,
				    loadMask:{msg:'正在加载数据，请稍侯……'},
				    draggable:false
		    });
		    
		    var detailEl;
			  var rightClick  = new Ext.menu.Menu({
									id:'feeds-ctx',
									items: [{
										id:'delrealidArealist',
										iconCls:'load-icon',
										text:'删除网络对象',
										scope: this,
										handler:function()
										{
											var record = xtzygrid.getStore().getAt(detailEl);
											var my_id=record.get("id"); 
											var deflag=1;
											  Ext.MessageBox.confirm('提示','你确定要删除此网络对象吗？',function(button,text)
											  {
													if(button=="yes")
													{
														Ext.Ajax.request
														({
															url:'/msa/main.xp',
															params:{Fun:'ltnetarealist',deflag:'1',start:0,limit:pagesize,del_id:my_id},
															success:function(response,options){
																	var retxt=response.responseText;//从这句C文件拿到返回值0  lt_TcpResponse(confd,ltMsgPk,2,"lthead",LT_TYPE_STRING,"Content-type: application/json\n","lthtml",LT_TYPE_STRING,"0");
		                              if(retxt.substring(0,1)=="0"){
																	   Ext.MessageBox.alert('提示','网络对象删除成功!');
				                             xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
		                              }else{
		                                 Ext.MessageBox.alert('提示','网络对象删除失败!'); //没拿到返回值
		                              }
															},
															failure:function(){
		                                 Ext.MessageBox.alert('提示','网络对象删除失败!');
		                           }
														});		    
														 xtzystore.load({params:{Fun:'ltnetarealist', start:0,limit:pagesize}});
											    }
											   });
										 }
									}]/*,{添加新的右键菜单}*/
				});
			  xtzygrid.addListener('rowclick', rightClickFn); 
			  xtzygrid.addListener('rowcontextmenu', rightClickFn);
			  function rightClickFn(client, rowIndex, e) 
			  {
			   rightClick.showAt(e.getXY()); 
			   detailEl=  rowIndex;
		    }  
		    new Ext.Viewport({
						layout: 'border',
						items: [
						  {
		          region:'north',
		          contentEl: 'north',
		          split:true,
		          height: 230,
		          minSize: 100,
		          maxSize: 300,
		          collapsible: true,
		          title:'添加网络对象',
		          margins:'0 0 0 0'
		         },xtzygrid
						],
		        renderTo: Ext.getBody()
		    });
		    myMask.hide();
    });
</SCRIPT>
</HEAD>
<BODY oncontextmenu="return false">
<DIV id=north>
<form id="listform"  name="listform" method="post" action="/msa/main.xp">
  <table width="613" border="0" cellspacing="0" align="center" > 
      <tr> 
	      <td align="right" width="95" height="26">起始 IP</td>
	      <td height="26"> 
	        <input type="text" name="bip" size="15" maxlength="15" value="" class=input>
	      </td>
	      <td align="right" width="106" height="26">终止 IP</td>
	      <td height="26"> 
	        <input type="text" name="eip" size="15" maxlength="15" value="" class=input>
	      </td>
     </tr> 
     
    <tr> 
	      <td align="right" width="95" height="26">IP描述</td>
	      <td height="32" colspan="3">
	        <input type="text" name="ipdesp" size="45" maxlength="50" value="" class=input>
        </td>
	  </tr> 
     
     <tr> 
      <td align="right" width="95" height="32">网络标识</td>
      <td height="32" width="151"> 
      	<select name="netflag" class=inputsel >
				 	<option value="1" > 基于IP地址锁定</option>
				 	<option value="2" > 基于mac地址锁定</option>
				 	<option value="4" > 基于PPPOE验证</option>
				 	<option value="21"> AD身份验证-</option>
				 	<option value="22"> AD验证-web心跳机制</option>
				 	<option value="23"> 用户密码验证-web方式</option>
				 	<option value="24"> 心跳机制验证-web方式</option>
				 	<option value="25"> 用户密码验证-客户端方式</option>
				 	<option value="26"> LDAP身份验证-web方式</option>
				 	<option value="27"> 心跳机制LDAP身份验证-web方式</option>
				 <!--	<option value="28"> LDAP身份验证-客户端方式</option>-->
				 	<option value="29"> RADIUS身份验证-web方式</option>
				 	<option value="30"> 心跳机制RADIUS身份验证-web方式</option>
				 <!--	<option value="31"> RADIUS身份验证-客户端方式</option>-->
				 	<option value="41"> 免身份验证强制安装客户端</option>
				 	<!--<option value="44"> usbkey身份验证</option>-->
				 	<option value="90"> 外部服务器</option>
					<option value="91" >无限制外部服务器</option>
					<option value="99" >免监控网段</option>
					<option value="100"> 禁止连接网段</option>
	      </select>
      </td>
      <td align="right" width="106" height="32">SNMP识别</td>
      <td height="32" width="153"> 
      	<select name="snmpnum" class=inputsel >
				 	<option value="0" selected > 不通过SNMP识别MAC</option>
					<option value="1" > 通过SNMP1识别MAC</option>
					<option value="2" > 通过SNMP2识别MAC</option>
					<option value="3" > 通过SNMP3识别MAC</option>
					<option value="4" > 通过SNMP4识别MAC</option>
					<option value="5" > 通过SNMP5识别MAC</option>
					<option value="6" > 通过SNMP6识别MAC</option>
        </select>
      </td>
    </tr>
    <tr> 
	      <td align="right" width="95" height="26">首次访问页面</td>
	      <td height="32" colspan="3">
	        <input type="text" name="homeurl" size="45" maxlength="50" value="" class=input>
        </td>
	  </tr> 
	  <tr> 
      <td align="right" width="95" height="26">操作</td>
      <td height="32" width="151"> 
        <input type="button" id="Service" name="Service" value="选择默认所属策略组" border="0" class=input style="cursor: hand" >
        </td>
        
        	<td>
        <input type="button" id="Manager" name="Manager" value="选择默认所属部门"  border="0" class=input style="cursor: hand" >
      </td>
	  </tr>
	     
    <tr>
      <td>&nbsp;</td>
	  	<td height="32" colspan="2">
        Hash算法查询
          <input type="radio" name="hash" value="0"  style="cursor: hand" checked="checked" >是
		&nbsp;&nbsp;<input type="radio" name="hash" value="1"  style="cursor: hand" >否
      </td>
	  <td> 
        <input type="button" class=inputf0 name="add"  value="添加" onClick="addlistfun()" style="cursor: hand" >
        </td>
	  </tr>
	  <input type="hidden" name="grouppolicy" id="grouppolicy" value="0">
	  <input type="hidden" name="groupmanager" id="groupmanager" value="0">
  </table>
</form>
</DIV>
</BODY>
</HTML>
